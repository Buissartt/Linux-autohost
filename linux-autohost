#!/bin/bash

### GLOBAL VARIABLE ###
FILE_NAME="./linux-autohost"
HOSTS_PATH=""
OS=""
#######################

if [ "$EUID" -ne 0 ]; then
	echo -e "\e[31mError \e[39m: You need to run this file using \e[33msudo\e[39m"
  	exit
fi

exec 6>&1 # Save default stdout to position 6

#Detect if it is a WSL or a native linux
if grep -q Microsoft /proc/version; then
	OS="Windows"
	HOSTS_PATH="/mnt/c/Windows/System32/drivers/etc/hosts"
else
	OS="Linux"
	HOSTS_PATH="/etc/hosts"
fi

########################################
# Help Commands

Help()
{
	RestoreStdOut
	echo -e "\e[32mUsage \e[39m: ${FILE_NAME} [OPTIONS]"
	echo -e ""
	echo -e "\e[32mExample \e[39m:"
	echo -e "  ${FILE_NAME} -p=/home/user/myproject -n=blog (On Linux and WSL)"
	echo -e "  ${FILE_NAME} -p=/mnt/d/Sites/myproject -n=blog (On WSL)"
	echo -e "  ${FILE_NAME} -r=blog (On Linux and WSL)"
	echo -e ""
	echo -e "\e[32mOptions \e[39m:"
	echo -e "  -n, --name    \e[33m(Required)\e[39m The name of the new website you want to create."
	echo -e "  -p, --path    \e[33m(Required)\e[39m The path of the source folder that contains source files."
	echo -e "  -r, --remove  \e[96m(Optional)\e[39m Remove a configuration (WIP)."
	echo -e "  -q, --quiet   \e[96m(Optional)\e[39m Quiet mode. Nothing is written to standart output."
	echo -e "  -V, --version \e[96m(Optional)\e[39m Print the script version."
	echo -e "  -h, --help    \e[96m(Optional)\e[39m Print the help message."
}

########################################


Version()
{
	RestoreStdOut
  	echo -e "\e[32mCurrent version : 0.0.1\e[39m"
}

Main()
{

QuietStdOut

# Create symoblic link
ln -s ${PROJECT_PATH} /var/www/${PROJECT_NAME}
echo -e "\e[32mInfo \e[39m: Symbolic link created."

# Write the new config file
cat >> /etc/apache2/sites-available/${PROJECT_NAME}.conf <<EOL
<VirtualHost *:80>
		ServerName www.${PROJECT_NAME}.local
		ServerAlias ${PROJECT_NAME}.local
		ServerAdmin webmaster@localhost
		DocumentRoot /var/www/${PROJECT_NAME}

		<Directory /var/www/>
				Options Indexes FollowSymLinks MultiViews
				AllowOverride all
				Order allow,deny
				Allow from all
		</Directory>

		ErrorLog /var/log/apache2/error.${PROJECT_NAME}.local.log
		CustomLog /var/log/apache2/error.${PROJECT_NAME}.local.log combined
</VirtualHost>
EOL
echo -e "\e[32mInfo \e[39m: /etc/apache2/sites-available/${PROJECT_NAME}.conf created and updated."

# Enable the new conf file
echo -e "\e[32mInfo \e[39m: Enabling /etc/apache2/sites-available/${PROJECT_NAME}.conf file..."
QuietForceStdOut
a2ensite ${PROJECT_NAME}.conf
RestoreStdOut
echo -e "\e[32mInfo \e[39m: /etc/apache2/sites-available/${PROJECT_NAME}.conf enabled"

#DNS
if [[ $OS = "Linux" ]]; then
cat >> ${HOSTS_PATH} <<EOL

## Autogenerated by Linux-autohost ##
::1       	www.${PROJECT_NAME}.local
127.0.0.1 	www.${PROJECT_NAME}.local
::1       	${PROJECT_NAME}.local
127.0.0.1 	${PROJECT_NAME}.local
#####################################
EOL
echo -e "\e[32mInfo \e[39m: ${HOSTS_PATH} updated."
else 
	RestoreForceStdOut
	echo ""
	echo -e "\e[33mImportant \e[39m: Host file can not be automatically modified, you'll need to update it manually."
	echo -e "Update it by adding the following lines to the \e[33mC:\Windows\System32\drivers\etc\hosts\e[39m or directly on WSL on \e[33m${HOSTS_PATH}\e[39m :"
	echo "::1       www.${PROJECT_NAME}.local"
	echo "127.0.0.1 www.${PROJECT_NAME}.local"
	echo "::1       ${PROJECT_NAME}.local"
	echo "127.0.0.1 ${PROJECT_NAME}.local"
	echo ""
	QuietStdOut
fi

# Restart the apache's service
echo -e "\e[32mInfo \e[39m: Restarting apache2..."
QuietForceStdOut
service apache2 restart
RestoreStdOut
echo -e "\e[32mInfo \e[39m: apache2 successfully restarted"
echo ""
echo "Now, check out the folloxing url to access your new local website : http://${PROJECT_NAME}.local"

}

Verif()
{
	RestoreForceStdOut

	# Empty project name or path
	if [[ -z $PROJECT_NAME || -z $PROJECT_PATH ]]; then
		echo -e "\e[31mError \e[39m: Invalid arguments. You need to specify both project name and project path."
		echo -e "For more informations, type \e[33m${FILE_NAME} -h\e[39m"
		exit
	fi

	# Source path doesn't exist
	if [[ ! -e $PROJECT_PATH ]]; then
		echo -e "\e[31mError \e[39m: Invalid arguments. ${PROJECT_PATH} does not exist."
		echo -e "For more informations, type \e[33m${FILE_NAME} -h\e[39m"
		exit
	fi

	# Source path isn't a directory
	if [[ ! -d $PROJECT_PATH ]]; then
		echo -e "\e[31mError \e[39m: Invalid arguments. ${PROJECT_PATH} is not a directory."
		echo -e "For more informations, type \e[33m${FILE_NAME} -h\e[39m"
		exit
	fi

	# Symbolic link already exists
	if [[ -e /var/www/${PROJECT_NAME} && -L /var/www/${PROJECT_NAME} ]]; then 
		echo -e "\e[31mError \e[39m: The directory or file /var/www/${PROJECT_NAME} already exists."
		echo -e "For more informations, type \e[33m${FILE_NAME} -h\e[39m"
		exit
	fi

	# Apache conf already exists
	if [[ -e /etc/apache2/sites-available/${PROJECT_NAME}.conf ]]; then 
		echo -e "\e[31mError \e[39m: The file /etc/apache2/sites-available/${PROJECT_NAME}.conf already exists."
		echo -e "For more informations, type \e[33m${FILE_NAME} -h\e[39m"
		exit
	fi
}

Remove()
{
	# Faire une vÃ©rification par y/n
	read -p "Important : Are you sure you want to remove the ${PROJECT_NAME} project ? (y/n) " answer
	compteur=0
	while ([ -z $answer ] || ([ $answer != "y" ] && [ $answer != "n" ] && [ $answer != "yes" ] && [ $answer != "no" ])) && [ $compteur -lt 2 ]; do
		read -p "Important : Are you sure you want to remove the ${PROJECT_NAME} project ? (y/n) " answer
		let "compteur++"
	done

	if [ ! -z $answer ] && ([ $answer = "y" ] || [ $answer = "yes" ]); then
		# Ici, nous n'avons besoin que du PROJECT_NAME 
		# ${PROJECT_NAME} (variable globale)

		# Supprimer les fichiers dans sites-available, sites-enabled et /var/www
		rm -R /var/www/${PROJECT_NAME}
		echo -e "\e[32mInfo \e[39m: Directory (/var/www/${PROJECT_NAME}) deleted."
		rm    /etc/apache2/sites-available/${PROJECT_NAME}.conf
		rm    /etc/apache2/sites-enabled/${PROJECT_NAME}.conf
		echo -e "\e[32mInfo \e[39m: Configuration files deleted."

		# Supprimer les fichiers de logs dans /var/log/apache2 je crois
		rm    /var/log/apache2/error.${PROJECT_NAME}.local.log
		echo -e "\e[32mInfo \e[39m: Log file deleted."
			
		if [[ $OS = "Linux" ]]; then
			# Informations qu'il faut manuelement nettoyer le fichier hosts
			sed -i /"## Autogenerated by Linux-autohost ##"/d ${HOSTS_PATH}
			sed -i /"::1       	www.${PROJECT_NAME}.local"/d ${HOSTS_PATH}
			sed -i /"127.0.0.1 	www.${PROJECT_NAME}.local"/d ${HOSTS_PATH}
			sed -i /"::1       	${PROJECT_NAME}.local"/d ${HOSTS_PATH}
			sed -i /"127.0.0.1 	${PROJECT_NAME}.local"/d ${HOSTS_PATH}
			sed -i /"#####################################"/d ${HOSTS_PATH}
			echo -e "\e[32mInfo \e[39m: Hosts file cleaned."

		else
			RestoreForceStdOut
			echo ""
			echo -e "\e[33mImportant \e[39m: Host file can not be automatically modified, you'll need to update it manually."
			echo -e "Update it by removing the following lines to the \e[33mC:\Windows\System32\drivers\etc\hosts\e[39m or directly on WSL on \e[33m${HOSTS_PATH}\e[39m :"
			echo "::1       www.${PROJECT_NAME}.local"
			echo "127.0.0.1 www.${PROJECT_NAME}.local"
			echo "::1       ${PROJECT_NAME}.local"
			echo "127.0.0.1 ${PROJECT_NAME}.local"
			echo ""
			QuietStdOut
		fi
		# Restart le service apache2
		echo -e "\e[32mInfo \e[39m: Restarting apache2..."
		QuietForceStdOut
		service apache2 restart
		RestoreStdOut
		echo -e "\e[32mInfo \e[39m: apache2 successfully restarted"
	else
		exit
	fi

}

QuietStdOut()
{
	if [[ $IS_QUIET -eq 1 ]]; then
		exec > /dev/null # overwrite default stdout to /dev/null
	fi
}

QuietForceStdOut()
{
	exec > /dev/null # overwrite default stdout to /dev/null
}

RestoreStdOut()
{
	if [[ $IS_QUIET -ne 1 ]]; then
		exec 1>&6 # restore default stdout
	fi
}
RestoreForceStdOut()
{
	exec 1>&6 # restore default stdout
}

for arg in "$@"
do
	case $arg in
		-n=*|--name=*)
			PROJECT_NAME="${arg#*=}"
			shift
			shift
		;;
		-p=*|--path=*)
			PROJECT_PATH="${arg#*=}"
			shift
			shift
		;;
		-r=*|--remove=*)
			PROJECT_NAME="${arg#*=}"
			Remove $PROJECT_NAME
			shift
			shift
			exit
		;;
		-q|--quiet) # Display nothing on the console
			IS_QUIET=1
			QuietStdOut
			shift
		;;
		-h|--help) # display help
			Help
			exit
		;;
		-V|--version) # display version
			Version
			exit
		;;
	esac
done

Verif

if [[ $ERROR -eq 0 ]]; then
	Main
fi
RestoreStdOut
exit
